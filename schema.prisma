generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  password           String?
  image              String?
  emailVerified      DateTime?
  accounts           Account[]
  sessions           Session[]
  messages           Message[]
  verificationTokens VerificationToken[]
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  @@map(name: "users")
}

model Message {
  id               String @id @default(dbgenerated("substring(md5(random()::text), 1, 6)")) @db.Char(6)
  message          String
  colour           String
  flower           Int
  sender           String
  recipient        String
  user             User?    @relation(fields: [userId], references: [id])
  userId           String?
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}